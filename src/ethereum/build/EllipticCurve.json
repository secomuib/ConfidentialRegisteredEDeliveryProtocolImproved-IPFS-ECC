{
  "abi": [],
  "devdoc": {
    "author": "Witnet Foundation",
    "details": "Library providing arithmetic operations over elliptic curves. This library does not check whether the inserted points belong to the curve `isOnCurve` function should be used by the library user to check the aforementioned statement.",
    "methods": {},
    "title": "Elliptic Curve Library"
  },
  "evm": {
    "assembly": "    /* \"ConfidentialMultipartyRegisteredEDeliveryWithoutTTP.sol\":342:11711  library EllipticCurve {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":252:259   */\n  dup1\n    /* \"--CODEGEN--\":246:260   */\n  mload\n    /* \"--CODEGEN--\":243:244   */\n  0x00\n    /* \"--CODEGEN--\":238:261   */\n  byte\n    /* \"--CODEGEN--\":232:236   */\n  0x73\n    /* \"--CODEGEN--\":229:262   */\n  eq\n    /* \"--CODEGEN--\":270:271   */\n  0x00\n    /* \"--CODEGEN--\":265:285   */\n  dup2\n  eq\n  tag_2\n  jumpi\n    /* \"--CODEGEN--\":222:285   */\n  jump(tag_1)\n    /* \"--CODEGEN--\":265:285   */\ntag_2:\n    /* \"--CODEGEN--\":274:283   */\n  invalid\n    /* \"--CODEGEN--\":222:285   */\ntag_1:\n  pop\n    /* \"--CODEGEN--\":298:307   */\n  address\n    /* \"--CODEGEN--\":295:296   */\n  0x00\n    /* \"--CODEGEN--\":288:308   */\n  mstore\n    /* \"--CODEGEN--\":328:332   */\n  0x73\n    /* \"--CODEGEN--\":319:326   */\n  dup2\n    /* \"--CODEGEN--\":311:333   */\n  mstore8\n    /* \"--CODEGEN--\":352:359   */\n  dup3\n    /* \"--CODEGEN--\":343:350   */\n  dup2\n    /* \"--CODEGEN--\":336:360   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"ConfidentialMultipartyRegisteredEDeliveryWithoutTTP.sol\":342:11711  library EllipticCurve {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa165627a7a72305820ef0a9a0c38e724ec62e2df358f5df989285ff30a1ae762e5d987ee608028a0520029\n}\n",
    "bytecode": {
      "linkReferences": {},
      "object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820ef0a9a0c38e724ec62e2df358f5df989285ff30a1ae762e5d987ee608028a0520029",
      "opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xef EXP SWAP11 0xc CODESIZE 0xe7 0x24 0xec PUSH3 0xE2DF35 DUP16 0x5d 0xf9 DUP10 0x28 0x5f RETURN EXP BYTE 0xe7 PUSH3 0xE5D987 0xee PUSH1 0x80 0x28 LOG0 MSTORE STOP 0x29 ",
      "sourceMap": "342:11369:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
    },
    "deployedBytecode": {
      "linkReferences": {},
      "object": "73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820ef0a9a0c38e724ec62e2df358f5df989285ff30a1ae762e5d987ee608028a0520029",
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xef EXP SWAP11 0xc CODESIZE 0xe7 0x24 0xec PUSH3 0xE2DF35 DUP16 0x5d 0xf9 DUP10 0x28 0x5f RETURN EXP BYTE 0xe7 PUSH3 0xE5D987 0xee PUSH1 0x80 0x28 LOG0 MSTORE STOP 0x29 ",
      "sourceMap": "342:11369:0:-;;;;;;;;"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "15200",
        "executionCost": "116",
        "totalCost": "15316"
      },
      "internal": {
        "deriveY(uint8,uint256,uint256,uint256,uint256)": "infinite",
        "ecAdd(uint256,uint256,uint256,uint256,uint256,uint256)": "infinite",
        "ecInv(uint256,uint256,uint256)": "infinite",
        "ecMul(uint256,uint256,uint256,uint256,uint256)": "infinite",
        "ecSub(uint256,uint256,uint256,uint256,uint256,uint256)": "infinite",
        "expMod(uint256,uint256,uint256)": "infinite",
        "invMod(uint256,uint256)": "infinite",
        "isOnCurve(uint256,uint256,uint256,uint256,uint256)": "infinite",
        "jacAdd(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": "infinite",
        "jacDouble(uint256,uint256,uint256,uint256,uint256)": "infinite",
        "jacMul(uint256,uint256,uint256,uint256,uint256,uint256)": "infinite",
        "toAffine(uint256,uint256,uint256,uint256)": "infinite"
      }
    },
    "legacyAssembly": {
      ".code": [
        {
          "begin": 342,
          "end": 11711,
          "name": "PUSH #[$]",
          "value": "0000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "begin": 342,
          "end": 11711,
          "name": "PUSH [$]",
          "value": "0000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "begin": 132,
          "end": 134,
          "name": "PUSH",
          "value": "B"
        },
        {
          "begin": 166,
          "end": 173,
          "name": "DUP3"
        },
        {
          "begin": 155,
          "end": 164,
          "name": "DUP3"
        },
        {
          "begin": 146,
          "end": 153,
          "name": "DUP3"
        },
        {
          "begin": 137,
          "end": 174,
          "name": "CODECOPY"
        },
        {
          "begin": 252,
          "end": 259,
          "name": "DUP1"
        },
        {
          "begin": 246,
          "end": 260,
          "name": "MLOAD"
        },
        {
          "begin": 243,
          "end": 244,
          "name": "PUSH",
          "value": "0"
        },
        {
          "begin": 238,
          "end": 261,
          "name": "BYTE"
        },
        {
          "begin": 232,
          "end": 236,
          "name": "PUSH",
          "value": "73"
        },
        {
          "begin": 229,
          "end": 262,
          "name": "EQ"
        },
        {
          "begin": 270,
          "end": 271,
          "name": "PUSH",
          "value": "0"
        },
        {
          "begin": 265,
          "end": 285,
          "name": "DUP2"
        },
        {
          "begin": 265,
          "end": 285,
          "name": "EQ"
        },
        {
          "begin": 265,
          "end": 285,
          "name": "PUSH [tag]",
          "value": "2"
        },
        {
          "begin": 265,
          "end": 285,
          "name": "JUMPI"
        },
        {
          "begin": 222,
          "end": 285,
          "name": "PUSH [tag]",
          "value": "1"
        },
        {
          "begin": 222,
          "end": 285,
          "name": "JUMP"
        },
        {
          "begin": 265,
          "end": 285,
          "name": "tag",
          "value": "2"
        },
        {
          "begin": 265,
          "end": 285,
          "name": "JUMPDEST"
        },
        {
          "begin": 274,
          "end": 283,
          "name": "INVALID"
        },
        {
          "begin": 222,
          "end": 285,
          "name": "tag",
          "value": "1"
        },
        {
          "begin": 222,
          "end": 285,
          "name": "JUMPDEST"
        },
        {
          "begin": 222,
          "end": 285,
          "name": "POP"
        },
        {
          "begin": 298,
          "end": 307,
          "name": "ADDRESS"
        },
        {
          "begin": 295,
          "end": 296,
          "name": "PUSH",
          "value": "0"
        },
        {
          "begin": 288,
          "end": 308,
          "name": "MSTORE"
        },
        {
          "begin": 328,
          "end": 332,
          "name": "PUSH",
          "value": "73"
        },
        {
          "begin": 319,
          "end": 326,
          "name": "DUP2"
        },
        {
          "begin": 311,
          "end": 333,
          "name": "MSTORE8"
        },
        {
          "begin": 352,
          "end": 359,
          "name": "DUP3"
        },
        {
          "begin": 343,
          "end": 350,
          "name": "DUP2"
        },
        {
          "begin": 336,
          "end": 360,
          "name": "RETURN"
        }
      ],
      ".data": {
        "0": {
          ".auxdata": "a165627a7a72305820ef0a9a0c38e724ec62e2df358f5df989285ff30a1ae762e5d987ee608028a0520029",
          ".code": [
            {
              "begin": 342,
              "end": 11711,
              "name": "PUSHDEPLOYADDRESS"
            },
            {
              "begin": 342,
              "end": 11711,
              "name": "ADDRESS"
            },
            {
              "begin": 342,
              "end": 11711,
              "name": "EQ"
            },
            {
              "begin": 342,
              "end": 11711,
              "name": "PUSH",
              "value": "80"
            },
            {
              "begin": 342,
              "end": 11711,
              "name": "PUSH",
              "value": "40"
            },
            {
              "begin": 342,
              "end": 11711,
              "name": "MSTORE"
            },
            {
              "begin": 342,
              "end": 11711,
              "name": "PUSH",
              "value": "0"
            },
            {
              "begin": 342,
              "end": 11711,
              "name": "DUP1"
            },
            {
              "begin": 342,
              "end": 11711,
              "name": "REVERT"
            }
          ]
        }
      }
    },
    "methodIdentifiers": {}
  },
  "metadata": "{\"compiler\":{\"version\":\"0.5.3+commit.10d17f24\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Witnet Foundation\",\"details\":\"Library providing arithmetic operations over elliptic curves. This library does not check whether the inserted points belong to the curve `isOnCurve` function should be used by the library user to check the aforementioned statement.\",\"methods\":{},\"title\":\"Elliptic Curve Library\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"ConfidentialMultipartyRegisteredEDeliveryWithoutTTP.sol\":\"EllipticCurve\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ConfidentialMultipartyRegisteredEDeliveryWithoutTTP.sol\":{\"keccak256\":\"0x2aee27d733c68d31982f0acdd7cf8108658c03908164e4481fd3a8ff5ad71c1a\",\"urls\":[\"bzzr://59bc2157b7bd1f0c1bbeb34d6d7e2688a65ca3cc17d28c078d2fd47dce9ea8b7\"]}},\"version\":1}",
  "userdoc": {
    "methods": {}
  }
}
